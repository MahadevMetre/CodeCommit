<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1400.v7fd111b_ec82f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2184.v0b_358b_953e69"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2184.v0b_358b_953e69">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.authorizeproject.AuthorizeProjectProperty plugin="authorize-project@1.7.1">
      <strategy class="org.jenkinsci.plugins.authorizeproject.strategy.TriggeringUsersAuthorizationStrategy"/>
    </org.jenkinsci.plugins.authorizeproject.AuthorizeProjectProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>3</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@332.va_1ee476d8f6d">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <com.synopsys.arc.jenkinsci.plugins.jobrestrictions.jobs.JobRestrictionProperty plugin="job-restrictions@0.8"/>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3894.vd0f0248b_a_fc4">
    <script>pipeline {
    agent any
    stages {
        stage(&apos;Checkout Source Code&apos;) {
            steps {
				timestamps {
					checkout([$class: &apos;SubversionSCM&apos;, 
							  locations: [[credentialsId: &apos;fa1eeeb6-8ea8-4b36-81c9-5f88ef8ef815&apos;, 
										   depthOption: &apos;infinity&apos;, 
										   ignoreExternalsOption: true, 
										   local: &apos;.&apos; , 
										   remote: &apos;https://svn.franklinmadisonds.com/svn/insurance/ui/self_service_portal/branches/sprint-46&apos;]], 
										   quietOperation: true, 
										   workspaceUpdater: [$class: &apos;UpdateWithCleanUpdater&apos;]
					])
				}
            }
        }
        
        stage(&apos;Run SonarQube Analysis&apos;) {
            steps {
                script {
                    sh &apos;&apos;&apos; 
                    set +x
                    cd /opt/scripts/
                    ./sonarscan_ui.sh &apos;&apos;&apos;
                }
            }
        }
        
        stage(&apos;Execute Build&apos;) {
            steps {
				timestamps {
					script {
					   sh &apos;&apos;&apos;
					   set +x
					   cd /opt/scripts/
					   ./nginx_build_pipeline.sh &quot;self-service-portal&quot;
					   &apos;&apos;&apos;
					}
				}
            }
        }
        
        stage(&apos;S3 Configure&apos;) {
            steps {
                script {
                    sh &apos;&apos;&apos;
                    set +x
					cd /opt/scripts/
                    ./aws_s3_put_object.sh 
                    cd $WORKSPACE &amp;&amp; echo Cleaning up workspace &amp;&amp; rm -rf *
                    &apos;&apos;&apos;
                }
            }
        }
        
        stage(&apos;Promote to Dev&apos;) {
            steps {
                script {
                    def approvers = &apos;ssingh2, kkumar3, bramesh&apos;
                    def userInput = input(
                        id: &apos;PromoteToDev&apos;,
                        message: &apos;Do you want to promote to Dev environment?&apos;,
                        parameters: [
                            [$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Please confirm if you want to promote to Dev environment&apos;, name: &apos;Confirm promotion to Dev&apos;]
                        ],
                        submitterParameter: approvers
                    )
                    
                    echo &apos;User input for Dev promotion: &apos; + userInput
                    
                    if (userInput == true) {
                        // Perform actions for promoting to Dev environment
                        echo &apos;Promoting to Dev...&apos;
                        sh &apos;/opt/scripts/aws_s3_get_object.sh&apos;
                        sh &apos;/opt/scripts/nginx_deployment_asg.sh $S3_ARTIFACTS_FETCH_PATH devel self-service-portal.tar.gz&apos;
                    } else {
                        echo &apos;Dev promotion was not approved.&apos;
                    }
                }
            }
        }
        
        stage(&apos;Promote to Staging&apos;) {
            steps {
                script {
                    def approvers = &apos;syed, the_next_qa_lead, vhd, suhasj&apos;
                    def userInput = input(
                        id: &apos;PromoteToStaging&apos;,
                        message: &apos;Do you want to promote to Staging environment?&apos;,
                        parameters: [
                            [$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Please confirm if you want to promote to Staging environment&apos;, name: &apos;Confirm promotion to Staging&apos;]
                        ],
                        submitterParameter: approvers
                    )
                    
                    echo &apos;User input for Staging promotion: &apos; + userInput
                    
                    if (userInput == true) {
                        // Perform actions for promoting to Staging environment
                        echo &apos;Promoting to Staging...&apos;
                        sh &apos;/opt/scripts/aws_s3_get_object.sh&apos;
                        sh &apos;/opt/scripts/nginx_deployment_asg.sh $S3_ARTIFACTS_FETCH_PATH staging self-service-portal.tar.gz&apos;
                    } else {
                        echo &apos;Staging promotion was not approved.&apos;
                    }
                }
            }
        }


    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>